---
name: pib_cli Deploys

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)
# PYPI_API_TOKEN             (Required, for publish to pypi...)

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:

      - name: Publish to PyPi -- Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Publish to PyPi -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Publish to PyPi -- Create Docker Mounted Content
        run: |
          echo | ssh-keygen
          touch ${HOME}/.gitconfig
          touch ${HOME}/.gitconfig_global

      - name: Publish to PyPi -- Ensure File System is Writable by the Container
        run: |
          sudo chmod -R o+w .

      - name: Publish to PyPi -- Build Container
        run: |
          docker-compose build --build-arg VERSION=${VERSION}
          docker-compose up -d

      # START Continuous Deployment -- Customize this Section Depending on your strategy

      - name: Publish to PyPi -- Is CD enabled?
        if: env.PYPI_TOKEN != ''
        run: |
          echo "CD_ENABLED=true" >> $GITHUB_ENV
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish to PyPi -- Build and Publish a Python Package to PyPI
        if: env.CD_ENABLED == 'true'
        run: |
          docker-compose exec -T "${PROJECT_NAME}" poetry publish --build --username __token__ --password "${PYPI_API_TOKEN}"
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      # END Continuous Deployment -- Customize this Section Depending on your strategy

      - name: Publish to PyPi -- Report Job Status (Success)
        if: env.CD_ENABLED != 'true'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" "new release wheel has been built, but CD is disabled for this repository!"

      - name: Publish to PyPi -- Report Job Status (Success)
        if: env.CD_ENABLED == 'true'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: new release has been pushed to PyPi!"

      - name: Publish to PyPi -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated PyPi release has failed!"
